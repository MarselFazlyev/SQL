
 ## SELECTION ## - выборка определенных строк
Ограничение в условии в выводе нвзывается RESTRICTION


Шаблон **SELECT** statement вместе с концепцией **SELECTION**

SELECT * |{DISTINCT column(s) alias, expression(s) alias)
FROM table
WHERE condition(s);
(читается так : "Выведи все столбцы или те, которые я укажу, в таблице, где будут удовлетворятся мои определенные условия.

Рассматриваются примеры  оператора сравнения '='
пример1: select * from departments 
         where location_id = 1700;
пример2: select * from job_history 
         where job_id = 'ST_CLERK'; (!!! Если регистр букв в условии и значении разный, то результат выведен не будет, так как это разный результат)
пример3: select * from employees 
         where 'Dr '||first_name||' '||last_name = 'Dr David Austin';

Рассматриваются примеры  операторов неравенств '>,<,!=,'
пример1: select first_name, last_name , salary from employees 
         where salary >10000;
пример2: select * from departments 
         where location_id !=1700;

При сравнении текстовых значений  в запросе SQL они конвертируются в соответствующие числовые представления
(Можно представить словарь - если слово в нем стоит раньше, то оно меньше, чем слово, с которым сравнивалось первое слово)
пример1: select * from employees 
        where first_name>'Steven'

Пример с датой
пример1: select * from job_history
         where start_date < '01.01.97';

оператор сравнения  BETWEEN
пример1 : select first_name, last_name, salary from employees
        where salary between 4000 and 10000; (границы включены в поиск)
пример2: select * from job_history
         where start_date between '01.01.97' and '01.01.99';
пример3: select * from employees 
         where first_name between 'A' and 'C';

оператор IN (вывести все/выбранное из таблицы, в которой поле равно ...)

пример1: select * from locations 
         where country_id in 'US';
пример2: select * from departments
         where location_id in 1700;
пример3: select first_name, last_name from employees 
         where department_id in (90,100,80);

перечисление требуемых значений еще можно прописать через оператор **OR**
пример4: select first_name, last_name from employees 
         where department_id = 90 or department_id = 100 or department_id = 80;

если сравниваем с null, то правильный синтаксис is null;
пример: select * from  employees
        where commission_pct is null; 

 оператор сравнения **LIKE**

работает только с текстовым типом нужен для сравнения текстов,слов,букв.
Укомплектован двумя специальным символами : символ '%' и символ '_'
'%' может быть заменен на ноль или большее любое количество символов.
'_' может быть заменен только на один любой символ
пример: select * from employees where first_name like 'S%'; (найдет всех,чье имя начинается на 'S')

логические операторы

**TRUE**
все выражение принимает значение TRUE тогда и только тогда, когда все условия, объединенные AND, по отдельности тоже возвращают TRUE.
пример:SELECT * FROM employees where first_name like 'D%' AND SALARY>10000; (ВЫВЕСТИ ВСЕХ EMPLOYEES,где и имя начинается на 'D',и зарплата >10000)
**OR**
все выражение принимает значение TRUE тогда и только тогда, когда хотя бы одно из условий, объединенные **OR**, по отдельности тоже возвращают TRUE.
пример: SELECT * FROM employees where first_name like 'D%' OR SALARY>10000;
**NOT**
оператор **NOT**меняет значение условия на противоположное.
пример1:SELECT * FROM employees where NOT (MANAGER_ID<120);
пример2:SELECT * FROM EMPLOYEES WHERE  LAST_NAME NOT  LIKE 'K%';
пример3:SELECT * FROM EMPLOYEES WHERE JOB_ID NOT IN ('ST_MAN','ST_CLERK');
пример4:SELECT * FROM EMPLOYEES WHERE SALARY NOT BETWEEN 5000 AND 10000;
пример5:SELECT * FROM EMPLOYEES WHERE commission_pct  is not  null;
пример6:select * from employees where commission_pct is not null and last_name not like '%en';

Приоритетность операторов (не стал расписывать, все интуитивно понятно)


**ORDER BY** (СОРТИРОВКА)
Не влияет на количество итоговых строк, вляет только на расположение строк.
пример1: SELECT FIRST_NAME,SALARY FROM EMPLOYEES ORDER BY SALARY;
пример2:  SELECT FIRST_NAME,SALARY,HIRE_DATE FROM EMPLOYEES ORDER BY HIRE_DATE;
Чтобы сделать сортировку по возрастанию, нужно использовать ASC(Ascending)
пример1: select first_name,last_name from employees where salary <10000 order by first_name asc;
пример2: select first_name,last_name from employees where salary <10000 order by first_name desc;
пример3: select last_name,salary,hire_date,hire_date+salary*2 expr
from employees
where employee_id>120
order by expr;

если мы хотим переместить в сортировке все null вверх в списке или вниз,то прописать **nulls first** или **nulls last**
пример4: select * from employees order by commission_pct desc nulls first ;

можно сортировать по номеру столбца из select(НЕ ИЗ ТАБЛИЦЫ!!!)
пример 5:select first_name,salary from employees order by 1;
пример 6:select first_name,salary from employees order by 2;
 если написано так : select * from employees order by 1;
то выберется 1 столбец из таблицы и по нему отсортируется 

пример сортировки по нескольким параметрам
select job_id,first_name,last_name,salary,hire_date
from employees
order by job_id desc,last_name, 4 desc;

         

